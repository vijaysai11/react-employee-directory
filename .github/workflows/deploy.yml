# name: CI/CD Workflow for React App

# on:
#   push:
#     branches:
#       - main

# jobs:
#   # Step 1: Build and Push Docker Image
#   build:
#     name: Build and Push Docker Image
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the code
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Log in to Amazon ECR
#       - name: Log in to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       # Build, tag, and push Docker image
#       - name: Build, Tag, and Push Docker Image
#         run: |
#           # Define ECR repository URI
#           REPOSITORY_URI=123456789012.dkr.ecr.us-east-1.amazonaws.com/react-app

#           # Build the Docker image
#           docker build -t react-app .

#           # Tag the image for ECR
#           docker tag react-app:latest $REPOSITORY_URI:latest

#           # Push the image to ECR
#           docker push $REPOSITORY_URI:latest

#   # Step 2: Deploy to EC2
#   deploy:
#     name: Deploy on EC2
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       # SSH into EC2 and deploy
#       - name: Deploy via SSH
#         uses: appleboy/ssh-action@v0.1.8
#         with:
#           host: ${{ secrets.EC2_PUBLIC_IP }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             # Authenticate to ECR using IAM role
#             aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com

#             # Pull the latest Docker image
#             docker pull 123456789012.dkr.ecr.us-east-1.amazonaws.com/react-app:latest

#             # Stop and remove the current container if it exists
#             docker stop react-app || true
#             docker rm react-app || true

#             # Run the new container
#             docker run -d -p 80:80 --name react-app 123456789012.dkr.ecr.us-east-1.amazonaws.com/react-app:latest

name: CI/CD Workflow for React App

on:
  push:
    branches:
      - main  # Trigger on push to the 'main' branch

permissions:
  id-token: write
  contents: read

jobs:
  # Step 1: Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check environment variables
        run: |
         echo "AWS_ROLE_ARN = ${{ secrets.AWS_ROLE_ARN }}"
         echo "AWS_REGION = ${{ secrets.AWS_REGION }}"
        
      - name: Print OIDC Token URL
        run: echo "OIDC Token URL: $ACTIONS_ID_TOKEN_REQUEST_URL"

      - name: Decode OIDC Token
        run: |
          export OIDC_TOKEN=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN" $ACTIONS_ID_TOKEN_REQUEST_URL | jq -r '.id_token')
          echo "Decoded Token:"
          echo $OIDC_TOKEN | base64 -d | jq '.'
   


      # Step to configure AWS credentials and assume the IAM role
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com
          debug-logging: true

      - name: Debug AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, tag, and push the Docker image to ECR
      - name: Build, Tag, and Push Docker Image
        run: |
          # Define ECR repository URI
          REPOSITORY_URI=920373013288.dkr.ecr.eu-north-1.amazonaws.com/frontend/react-app-container

          # Build the Docker image from the Dockerfile
          docker build -t react-app .

          # Tag the image for the ECR repository
          docker tag react-app:latest $REPOSITORY_URI:latest

          # Push the image to Amazon ECR
          docker push $REPOSITORY_URI:latest

  # Step 2: Deploy to EC2
  deploy:
    name: Deploy on EC2
    needs: build  # This job depends on the successful completion of the build job
    runs-on: ubuntu-latest

    steps:
      # SSH into EC2 instance to deploy the Docker container
      - name: Deploy via SSH to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 instance public IP stored in GitHub secrets
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH private key stored in GitHub secrets
          script: |
            # Log in to Amazon ECR (using IAM role credentials on EC2)
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 920373013288.dkr.ecr.eu-north-1.amazonaws.com/frontend/react-app-container

            # Pull the latest Docker image from ECR
            docker pull 920373013288.dkr.ecr.eu-north-1.amazonaws.com/frontend/react-app-container:latest

            # Stop and remove the existing container (if any)
            docker stop react-app || true
            docker rm react-app || true

            # Run the new Docker container with the latest image
            docker run -d -p 80:80 --name react-app 920373013288.dkr.ecr.eu-north-1.amazonaws.com/frontend/react-app-container:latest
